#pragma kernel CSMain

RWTexture2D<float4> Result;
RWStructuredBuffer<int> currentGeneration;
RWStructuredBuffer<int> nextGeneration;
float4 deadCellColor;
float4 aliveCellColor;
uint width;
uint height;


uint2 GetXY(uint index)
{
    return uint2(index / height, index % height);
}

uint GetIndex(uint2 id)
{
    return int(id.x * height + id.y);
}

int CalculateLiveNeighbours(uint2 id)
{
    int liveNeighbours = 0;
    
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            if (id.x + i < 0 || id.x + i >= width)
                continue;
            if (id.y + j < 0 || id.y + j >= height)
                continue;
            if (id.x + i == id.x && id.y + j == id.y)
                continue;

            liveNeighbours += currentGeneration[GetIndex(uint2(id.x + i, id.y + j))];
        }
    }
    return liveNeighbours;
}

void SetNexGeneration(int i, int j)
{
    int liveNeighbours = CalculateLiveNeighbours(uint2(i, j));
    int currentPixelState = currentGeneration[GetIndex(uint2(i, j))];
            
    if (currentPixelState == 1 && liveNeighbours < 2)
        nextGeneration[GetIndex(uint2(i, j))] = 0;
    else if (currentPixelState == 1 && liveNeighbours > 3)
        nextGeneration[GetIndex(uint2(i, j))] = 0;
    else if (currentPixelState == 0 && liveNeighbours == 3)
        nextGeneration[GetIndex(uint2(i, j))] = 1;
    else
        nextGeneration[GetIndex(uint2(i, j))] = currentGeneration[GetIndex(uint2(i, j))];
}

void TransferNextGenerations(int index)
{
    currentGeneration[index] = nextGeneration[index];
}

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint2 coordinates = GetXY(id.x);
    SetNexGeneration(coordinates.x, coordinates.y);
    TransferNextGenerations(id.x);
    
    if (currentGeneration[id.x] >= 1)
    {
        Result[coordinates.xy] = aliveCellColor;
    }
    else
    {
        Result[coordinates.xy] = deadCellColor;
    }
}

