#pragma kernel CSMain

RWTexture2D<float4> Result;
float2 Resolution;
float Time;

struct Ray
{
    float3 origin;
    float3 direction;
};

float Noise(float t)
{
    return frac(sin(t * 3456.) * 6547.);
}

float4 N14(float t)
{
    return frac(sin(t * float4(3456., 123., 9475., 5681)) * float4(6547., 1453., 8444., 3689.));
}

Ray GetRay(float2 uv, float3 camPos, float3 lookAt, float zoom)
{
    Ray ray;
    ray.origin = camPos;
    
    float3 forward = normalize(lookAt - camPos);
    float3 right = cross(float3(0, 1, 0), forward);
    float3 up = cross(forward, right);
    float3 center = ray.origin + forward * zoom;
    float3 intersection = center + uv.x * right + uv.y * up;
    ray.direction = normalize(intersection - ray.origin);
    
    return ray;
}

float3 ClosestPoint(Ray r, float3 p)
{
    return r.origin + max(0, dot(p - r.origin, r.direction)) * r.direction;
}

float DistanceRay(Ray r, float3 p)
{
    return length(p - ClosestPoint(r, p));

}
float DrawCircle(Ray r, float3 p, float size, float blur)
{
    float d = DistanceRay(r, p);
    size *= length(p);
    float c = smoothstep(size, size * (1 - blur), d);
    c *= lerp(0.6, 1, smoothstep(size * .8, size, d));
    return c;
}
float3 MakeStreetLights(Ray ray, float time)
{
    float side = step(ray.direction.x, 0.);
    ray.direction.x = abs(ray.direction.x);
    
    float s = 1. / 10.;
    float mask = 0;
    
    for (float i = 0; i < 1.; i += s)
    {
        float ti = frac(time + i + side * s * .5);
        float3 p = float3(2, 2, 100. - ti * 100);
        mask += DrawCircle(ray, p, .05, .1) * ti * ti * ti;
    }
    
    return float3(1., .7, .3) * mask;
}
float3 EnvLights(Ray ray, float time)
{
    float side = step(ray.direction.x, 0.);
    ray.direction.x = abs(ray.direction.x);
    
    float s = 1. / 10.;
    float3 c = float3(0., 0., 0.);
    
    for (float i = 0; i < 1.; i += s)
    {
        float ti = frac(time + i + side * s * .5);
        
        float4 n = N14(i + side * 100.);
        float x = lerp(2.5, 10., n.x);
        float y = lerp(.1, 1.5, n.y);
        
        float3 p = float3(x, y, 50. - ti * 50);
        float fade = ti * ti * ti;
        
        float occlusion = sin(ti * 6.28 * 10. * n.x) * .5 + .5;
        fade = occlusion;
        
        float3 color = n.wzy;
        
        c += DrawCircle(ray, p, .05, .1) * fade * color * .5;
    }
    
    return c;
}


float3 MakeHeadLights(Ray ray, float time)
{
    time *= 2;
    
    float s = 1. / 30.;
    float mask = 0;
    float w1 = .25;
    float w2 = w1 * 1.2;
    
    for (float i = 0; i < 1.; i += s)
    {
        float n = Noise(i);
        
        if (n > .15)
            continue;
        
        float ti = frac(time + i);
        float z = 100. - ti * 100;
        float fade = ti * ti * ti * ti * ti;
        float focus = smoothstep(.9, 1., ti);
        float size = lerp(.05, .03, focus);
        
        mask += DrawCircle(ray, float3(-1. + w1, .15, z), size, .1) * fade;
        mask += DrawCircle(ray, float3(-1. - w1, .15, z), size, .1) * fade;
        mask += DrawCircle(ray, float3(-1. + w2, .15, z), size, .1) * fade;
        mask += DrawCircle(ray, float3(-1. - w2, .15, z), size, .1) * fade;
        
        float reflection = 0;
        
        reflection += DrawCircle(ray, float3(-1. + w2, -.15, z), size * 3, 1) * fade;
        reflection += DrawCircle(ray, float3(-1. - w2, -.15, z), size * 3, 1) * fade;
        
        mask += reflection * focus;
    }
    
    return float3(.9, .9, 1) * mask;
}
float3 MakeTailLights(Ray ray, float time)
{
    time *= .35;
    
    float s = 1. / 25.;
    float mask = 0;
    float w1 = .25;
    float w2 = w1 * 1.2;
    
    for (float i = 0.; i < 1.; i += s)
    {
        float n = Noise(i);
        
        if (n > .5)
            continue;
        
        float lane = step(.25, n);
        
        float ti = frac(time + i);
        float z = 100. - ti * 100;
        float fade = ti * ti * ti * ti * ti;
        float focus = smoothstep(.9, 1., ti);
        float size = lerp(.05, .03, focus);
        float laneShift = smoothstep(1., .96, ti);
        float x = 1.5 - lane * laneShift;
        
        float blink = step(0., sin(ti * 1000.)) * 7. * lane * step(.96, ti);
        
        mask += DrawCircle(ray, float3(x - w1, .15, z), size, .1) * fade;
        mask += DrawCircle(ray, float3(x + w1, .15, z), size, .1) * fade;
        mask += DrawCircle(ray, float3(x - w2, .15, z), size, .1) * fade;
        mask += DrawCircle(ray, float3(x + w2, .15, z), size, .1) * fade * (1 + blink);
        
        float reflection = 0;
        
        reflection += DrawCircle(ray, float3(x + w2, -.15, z), size * 3, 1) * fade * (1 + blink * .1);
        reflection += DrawCircle(ray, float3(x - w2, -.15, z), size * 3, 1) * fade;
        
        mask += reflection * focus;
    }
    
    return float3(1., .1, .03) * mask;
}

float2 Rain(float2 uv, float t)
{
    t *= 15.;
    
    float2 a = float2(3., 1.);
    float2 st = uv * a;
    
    float2 id = floor(st);
    st.y += t * .22;
    float n = frac(sin(id.x * 716.34) * 768.34);
    st.y += n;
    uv.y += n;
    id = floor(st);
    st = frac(st) - .5;
    
    t += frac(sin(id.x * 76.34 + id.y * 1453.7) * 768.34) * 6.283;
    float y = -sin(t + sin(t + sin(t) * .5)) * .43;
    float2 pl = float2(0, y);
    float2 o1 = (st - pl) / a;
    float d = length(o1);
    
    float m1 = smoothstep(.07, .0, d);
    
    float2 o2 = (frac(uv * a.x * float2(1., 2.)) - .5) / float2(1., 2.);
    d = length(o2);
    
    float m2 = smoothstep(.3 * (.5 - st.y), .0, d) * smoothstep(-.1, .1, st.y - pl.y);
    
    return float2(m1*o1*30 + m2*o2*10);

}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy / Resolution.xy;
    uv -= 0.5;
    uv.x *= Resolution.x / Resolution.y;
    
    float3 camPos = float3(.5, .2, 0);
    float3 lookAt = float3(.5, .2, 1);
    
    float t = Time * .05;
    
    float2 rainDistort = Rain(uv * 5., t) * .5;
    rainDistort += Rain(uv * 7., t) * .5; 
    
    uv.x += sin(uv.y * 70) * .005;
    uv.y += sin(uv.x * 170) * .003;
    
    Ray ray = GetRay(uv + rainDistort * .5, camPos, lookAt, 2.0);
    
    float3 color = MakeStreetLights(ray, t);
    color += MakeHeadLights(ray, t);
    color += MakeTailLights(ray, t);
    color += EnvLights(ray, t);
    
    color += (ray.direction.y + .25) * float3(.2, .1, .5);
    
    
    Result[id.xy] = float4(color, 1);
}
