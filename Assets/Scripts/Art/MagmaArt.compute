#pragma kernel CSMain
#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .001
#define TAU 6.283185
#define PI 3.141592

RWTexture2D<float4> Result;
float2 Resolution;
float Time;

float2x2 Rot(float a)
{
    float s = sin(a), c = cos(a);
    return float2x2(c, -s, s, c);
}
float sdBox(float3 p, float3 s)
{
    p = abs(p) - s;
    return length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);
}
float sdMagma(float3 p, float scale, float thickness, float bias)
{
    p *= scale;
    return abs(dot(sin(p), cos(p.zxy)) - bias) / scale - thickness;
}

float3 Transform(float3 p)
{
    p.xz = mul(p.xz, Rot(p.z* .15));
    p.z += Time * .1;
    p.y -= .3;
    return p;
}
float GetDist(float3 p)
{
    p = Transform(p);
    float box = sdBox(p, float3(1, 1, 1));
    
    float magma = sdMagma(p, 5.23, .03, 1.4);
    float magma2 = sdMagma(p, 10.76, .03, .3);
    float magma3 = sdMagma(p, 20.76, .03, .3);
    float magma4 = sdMagma(p, 35.76, .03, .3);
    float magma5 = sdMagma(p, 60.76, .03, .3);
    float magma6 = sdMagma(p, 110.76, .03, .3);
    
    magma -= magma2 * .4;
    magma -= magma3 * .3;
    magma -= magma4 * .2;
    magma -= magma5 * .2;
    magma -= magma6 * .3;
    
    float d = magma * .8;
    
    return d;
}

float RayMarch(float3 ro, float3 rd)
{
    float dO = 0.;
    
    for (int i = 0; i < MAX_STEPS; i++)
    {
        float3 p = ro + rd * dO;
        float dS = GetDist(p);
        dO += dS;
        if (dO > MAX_DIST || abs(dS) < SURF_DIST)
            break;
    }
    
    return dO;
}
float3 GetNormal(float3 p)
{
    float2 e = float2(.02, 0);
    float3 n = GetDist(p) -
        float3(GetDist(p - e.xyy), GetDist(p - e.yxy), GetDist(p - e.yyx));
    
    return normalize(n);
}

float3 GetRayDir(float2 uv, float3 p, float3 l, float z)
{
    float3
        f = normalize(l - p),
        r = normalize(cross(float3(0, 1, 0), f)),
        u = cross(f, r),
        c = f * z,
        i = c + uv.x * r + uv.y * u;
    return normalize(i);
}

float3 Background(float3 rd)
{
    float3 col = float3(0, 0, 0);
    float t = Time;
    float y = rd.y * .5 + .5;
    col += (1. - y) * float3(1., .4, .1) * 2.;
    
    float a = atan2(rd.x, rd.z);
    float flameNumber = sin(a * 10. + t) * sin(a * 7. - t) * sin(a * 6.);
    float3 flames = float3(flameNumber, flameNumber, flameNumber);
    flames *= smoothstep(.8, .5, y);
    
    col += flames;
    col = max(col, 0);
    col += smoothstep(.5, .0, y);
    
    return col;
}
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 uv = (id.xy - .5 * Resolution.xy) / Resolution.y;
    float t = Time;
    float3 ro = float3(0, 0, -.03);
    
    uv += sin(uv * 20. + t) * .005;
    
    float3 lookAt = float3(0, 0., 0);
    float3 rd = GetRayDir(uv, ro, lookAt, .8);
    
    float3 col = float3(0, 0, 0);
   
    float d = RayMarch(ro, rd);

    if (d < MAX_DIST)
    {
        float3 p = ro + rd * d;
        float3 n = GetNormal(p);
        float height = p.y;
        p = Transform(p);
        
        float dif = n.y * .5 + .5;
        col += float3(dif, dif, dif) * float3(dif, dif, dif);
        
        float magma2 = sdMagma(p, 10.76, .03, .3);
        col *= smoothstep(-.1, .06, magma2);
        
        float crackWidth = -.02 + smoothstep(0., -.5, n.y) * .04;
        float crakcs = smoothstep(crackWidth, -.03, magma2);
        float magma3 = sdMagma(p + t * .08, 5.76, .03, 0);
        float magma4 = sdMagma(p + t * .05, 4.76, .03, 0);
        
        crakcs *= magma3 * magma4 * 20. + .2 * smoothstep(.2, .0, n.y);
        
        col += crakcs * float3(1., .4, .1) * 3.;
        float magma5 = sdMagma(p - float3(0, t, 0), 3.76, .03, 0);

        col += magma5 * float3(1., .4, .1);
        
        col += smoothstep(0., -.2, height) * float3(1., .4, .1);

    }
    
    col = lerp(col, Background(rd), smoothstep(0., 7., d));
    col *= 1.- dot(uv, uv);
    
    Result[id.xy] = float4(col, 1.0);
}
